.fields
    .box
        .box-inner
            .field
                .field-label
                    = t('task.domain')
                .field-content
                    = h Domain.find(@task.domain_id).name
            .field
                .field-label
                    = t('task.deadline')
                .field-content
                    = h show_date(@task.deadline)

%h2.floatingheadline=t('task.fields')

- semantic_form_for @task, :url => { :action => "createentries" , :id => @task.id }, :html => {:multipart => true} do |f|
    = f.error_messages

    #templates
        - unless @fieldshash.nil?
            - @fieldshash.each do |k,v|
                .template-toggle
                    .template-toggle-inner
                        = MedicalTemplate.find(k).name
                .template-content{:id=>"t#{k}"}
                    %table
                        %thead
                            %tr
                                %th=t('task.name')
                                %th=t('task.creator_comment')
                                %th=t('task.value')
                                %th=t('task.unit')
                                %th=t('task.comment')
                        %tbody
                            -v.each do |x,y|
                                - @x = x
                                - @y = y
                                - @fielddef = FieldDefinition.find(@y.field_definition_id)
                                %tr.template-field{ :class => cycle('odd', 'even')}
                                    - if  @field_error_ids &&  @field_error_ids.include?(@x.to_s)
                                        %td{:class => 'field-error' }
                                            = Entry.find(@fielddef.field_entry_id).name
                                    -else
                                        %td
                                            = Entry.find(@fielddef.field_entry_id).name
                                    %td= y.comment
                                    - fields_for @y do |fi|
                                        -if @task.state == Task.state_inprogress
                                            - @measuredvalue = MeasuredValue.find_by_field_id(@x)
                                            = render :partial => InputTypeManager.input_type_partial(@fielddef.input_type,true)
                                            -if @y.ucum_entry_id.nil?
                                                %td= '-'
                                            -else
                                                -ucum = Entry.find(@y.ucum_entry_id)
                                                %td= ucum.description
                                            %td= text_field 'comments',@x, :value => @measuredvalue.comment, :size => '20', :maxlength => '30'
                                        -else
                                            = render :partial => InputTypeManager.input_type_partial(@fielddef.input_type,false)
                                            -if @y.ucum_entry_id.nil?
                                                %td= '-'
                                            -else
                                                -ucum = Entry.find(@y.ucum_entry_id)
                                                %td= ucum.description
                                            %td= text_field 'comments',@x, :size => '20', :maxlength => '30'
    %h2
        = t('task.file_upload')
    .fields
        .box
            .box-inner
                .field.fileupload
                    = file_field :file, :datafile
                    %span= t('task.comment')
                    = text_field "comments", "filecomment", :size=> '20', :maxlength => '30'
                    = submit_tag t('task.upload'), :name=>'upload'
                - unless @taskfiles.nil?
                    - @taskfiles.each do |tf|
                        .field.show-file
                            .field-label
                                %span.file-link= link_to tf.name, tf.path
                            .field-content
                                %span.file-desc= tf.description
                                %span.file-delete= submit_tag t('task.delete'), :name=>'delete['+tf.id.to_s + ']', :class => "lightgray"

    %h2.floatingheadline=t('task.additional_information')

    - f.inputs do
        = f.input :executor_comment
        = submit_tag t('task.save'), :name=>'save', :disable_with => t('please_wait')
        = submit_tag t('task.save_and_close'), :name=> 'saveandclose', :disable_with => t('please_wait')
